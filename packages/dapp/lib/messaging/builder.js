import { RequestErrors } from '@algosigner/common/types';
import { JsonRpc } from '@algosigner/common/messaging/jsonrpc';
import { MessageApi } from './api';
import { OnMessageHandler } from './handler';
export class MessageBuilder {
  static promise(method, params, error = RequestErrors.None) {
    return new Promise((resolve, reject) => {
      if (error == RequestErrors.None) {
        let api = new MessageApi();
        api.listen(OnMessageHandler.promise(resolve, reject));
        api.send(JsonRpc.getBody(method, params));
      } else {
        reject(error);
      }
    });
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tZXNzYWdpbmcvYnVpbGRlci50cyJdLCJuYW1lcyI6WyJSZXF1ZXN0RXJyb3JzIiwiSnNvblJwYyIsIk1lc3NhZ2VBcGkiLCJPbk1lc3NhZ2VIYW5kbGVyIiwiTWVzc2FnZUJ1aWxkZXIiLCJwcm9taXNlIiwibWV0aG9kIiwicGFyYW1zIiwiZXJyb3IiLCJOb25lIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJhcGkiLCJsaXN0ZW4iLCJzZW5kIiwiZ2V0Qm9keSJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUUEsYUFBUixRQUE0QiwwQkFBNUI7QUFHQSxTQUFRQyxPQUFSLFFBQXNCLHNDQUF0QjtBQUVBLFNBQVFDLFVBQVIsUUFBeUIsT0FBekI7QUFDQSxTQUFRQyxnQkFBUixRQUErQixXQUEvQjtBQUVBLE9BQU8sTUFBTUMsY0FBTixDQUFxQjtBQUN4QixTQUFPQyxPQUFQLENBQ0lDLE1BREosRUFFSUMsTUFGSixFQUdJQyxLQUFvQixHQUFHUixhQUFhLENBQUNTLElBSHpDLEVBSXdCO0FBRXBCLFdBQU8sSUFBSUMsT0FBSixDQUF5QixDQUFDQyxPQUFELEVBQVNDLE1BQVQsS0FBb0I7QUFDaEQsVUFBR0osS0FBSyxJQUFJUixhQUFhLENBQUNTLElBQTFCLEVBQWdDO0FBQzVCLFlBQUlJLEdBQUcsR0FBRyxJQUFJWCxVQUFKLEVBQVY7QUFDQVcsUUFBQUEsR0FBRyxDQUFDQyxNQUFKLENBQVdYLGdCQUFnQixDQUFDRSxPQUFqQixDQUF5Qk0sT0FBekIsRUFBaUNDLE1BQWpDLENBQVg7QUFDQUMsUUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVNkLE9BQU8sQ0FBQ2UsT0FBUixDQUNMVixNQURLLEVBRUxDLE1BRkssQ0FBVDtBQUlILE9BUEQsTUFPTztBQUNISyxRQUFBQSxNQUFNLENBQUNKLEtBQUQsQ0FBTjtBQUNIO0FBQ0osS0FYTSxDQUFQO0FBYUg7O0FBcEJ1QiIsInNvdXJjZXNDb250ZW50IjpbIiAgXHJcbmltcG9ydCB7UmVxdWVzdEVycm9yc30gZnJvbSAnQGFsZ29zaWduZXIvY29tbW9uL3R5cGVzJztcclxuaW1wb3J0IHtKc29uUnBjTWV0aG9kLEpzb25QYXlsb2FkfSBmcm9tICdAYWxnb3NpZ25lci9jb21tb24vbWVzc2FnaW5nL3R5cGVzJztcclxuXHJcbmltcG9ydCB7SnNvblJwY30gZnJvbSAnQGFsZ29zaWduZXIvY29tbW9uL21lc3NhZ2luZy9qc29ucnBjJztcclxuXHJcbmltcG9ydCB7TWVzc2FnZUFwaX0gZnJvbSAnLi9hcGknOyBcclxuaW1wb3J0IHtPbk1lc3NhZ2VIYW5kbGVyfSBmcm9tICcuL2hhbmRsZXInOyBcclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlQnVpbGRlciB7XHJcbiAgICBzdGF0aWMgcHJvbWlzZShcclxuICAgICAgICBtZXRob2Q6IEpzb25ScGNNZXRob2QsXHJcbiAgICAgICAgcGFyYW1zOiBKc29uUGF5bG9hZCxcclxuICAgICAgICBlcnJvcjogUmVxdWVzdEVycm9ycyA9IFJlcXVlc3RFcnJvcnMuTm9uZVxyXG4gICAgKTogUHJvbWlzZTxKc29uUGF5bG9hZD4ge1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SnNvblBheWxvYWQ+KChyZXNvbHZlLHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZihlcnJvciA9PSBSZXF1ZXN0RXJyb3JzLk5vbmUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBhcGkgPSBuZXcgTWVzc2FnZUFwaSgpO1xyXG4gICAgICAgICAgICAgICAgYXBpLmxpc3RlbihPbk1lc3NhZ2VIYW5kbGVyLnByb21pc2UocmVzb2x2ZSxyZWplY3QpKTtcclxuICAgICAgICAgICAgICAgIGFwaS5zZW5kKEpzb25ScGMuZ2V0Qm9keShcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2QsIFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtc1xyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG59Il19
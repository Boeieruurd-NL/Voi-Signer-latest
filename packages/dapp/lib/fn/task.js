function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { MessageBuilder } from '../messaging/builder';
import { RequestErrors } from '@algosigner/common/types';
import { JsonRpcMethod } from '@algosigner/common/messaging/types';
import { Runtime } from '@algosigner/common/runtime/runtime';
export class Task extends Runtime {
  static get inPayloadSign() {
    return ['amount', 'to'];
  }

  connect() {
    return MessageBuilder.promise(JsonRpcMethod.Authorization, {});
  }

  accounts(params, error = RequestErrors.None) {
    return MessageBuilder.promise(JsonRpcMethod.Accounts, params, error);
  } // TODO needs json and raw payload support and complete argument support


  sign(params, error = RequestErrors.None) {
    if (!super.requiredArgs(Task.inPayloadSign, Object.keys(params))) {
      error = RequestErrors.InvalidTransactionParams;
    }

    return MessageBuilder.promise(JsonRpcMethod.SignTransaction, params, error);
  }

  query(method, params, error = RequestErrors.None) {
    let request = {
      method: method,
      params: params
    };
    return MessageBuilder.promise(JsonRpcMethod.Algod, request, error);
  }

  algod(params, error = RequestErrors.None) {
    return MessageBuilder.promise(JsonRpcMethod.Algod, params, error);
  }

  indexer(params, error = RequestErrors.None) {
    return MessageBuilder.promise(JsonRpcMethod.Indexer, params, error);
  }

  subscribe(eventName, callback) {
    Task.subscriptions[eventName] = callback;
  }

}

_defineProperty(Task, "subscriptions", {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbi90YXNrLnRzIl0sIm5hbWVzIjpbIk1lc3NhZ2VCdWlsZGVyIiwiUmVxdWVzdEVycm9ycyIsIkpzb25ScGNNZXRob2QiLCJSdW50aW1lIiwiVGFzayIsImluUGF5bG9hZFNpZ24iLCJjb25uZWN0IiwicHJvbWlzZSIsIkF1dGhvcml6YXRpb24iLCJhY2NvdW50cyIsInBhcmFtcyIsImVycm9yIiwiTm9uZSIsIkFjY291bnRzIiwic2lnbiIsInJlcXVpcmVkQXJncyIsIk9iamVjdCIsImtleXMiLCJJbnZhbGlkVHJhbnNhY3Rpb25QYXJhbXMiLCJTaWduVHJhbnNhY3Rpb24iLCJxdWVyeSIsIm1ldGhvZCIsInJlcXVlc3QiLCJBbGdvZCIsImFsZ29kIiwiaW5kZXhlciIsIkluZGV4ZXIiLCJzdWJzY3JpYmUiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInN1YnNjcmlwdGlvbnMiXSwibWFwcGluZ3MiOiI7O0FBRUEsU0FBUUEsY0FBUixRQUE2QixzQkFBN0I7QUFFQSxTQUFpQ0MsYUFBakMsUUFBcUQsMEJBQXJEO0FBQ0EsU0FBUUMsYUFBUixRQUF1RCxvQ0FBdkQ7QUFDQSxTQUFRQyxPQUFSLFFBQXNCLG9DQUF0QjtBQUVBLE9BQU8sTUFBTUMsSUFBTixTQUFtQkQsT0FBbkIsQ0FBNEM7QUFJL0MsYUFBV0UsYUFBWCxHQUEwQztBQUN0QyxXQUFPLENBQUMsUUFBRCxFQUFVLElBQVYsQ0FBUDtBQUNIOztBQUVEQyxFQUFBQSxPQUFPLEdBQXlCO0FBQzVCLFdBQU9OLGNBQWMsQ0FBQ08sT0FBZixDQUNITCxhQUFhLENBQUNNLGFBRFgsRUFFSCxFQUZHLENBQVA7QUFJSDs7QUFFREMsRUFBQUEsUUFBUSxDQUNKQyxNQURJLEVBRUpDLEtBQW9CLEdBQUdWLGFBQWEsQ0FBQ1csSUFGakMsRUFHZTtBQUNuQixXQUFPWixjQUFjLENBQUNPLE9BQWYsQ0FDSEwsYUFBYSxDQUFDVyxRQURYLEVBRUhILE1BRkcsRUFHSEMsS0FIRyxDQUFQO0FBS0gsR0F4QjhDLENBMEIvQzs7O0FBQ0FHLEVBQUFBLElBQUksQ0FDQUosTUFEQSxFQUVBQyxLQUFvQixHQUFHVixhQUFhLENBQUNXLElBRnJDLEVBR29CO0FBQ3BCLFFBQUcsQ0FBQyxNQUFNRyxZQUFOLENBQW1CWCxJQUFJLENBQUNDLGFBQXhCLEVBQXNDVyxNQUFNLENBQUNDLElBQVAsQ0FBWVAsTUFBWixDQUF0QyxDQUFKLEVBQStEO0FBQzNEQyxNQUFBQSxLQUFLLEdBQUdWLGFBQWEsQ0FBQ2lCLHdCQUF0QjtBQUNIOztBQUNELFdBQU9sQixjQUFjLENBQUNPLE9BQWYsQ0FDSEwsYUFBYSxDQUFDaUIsZUFEWCxFQUVIVCxNQUZHLEVBR0hDLEtBSEcsQ0FBUDtBQUtIOztBQUVEUyxFQUFBQSxLQUFLLENBQ0RDLE1BREMsRUFFRFgsTUFGQyxFQUdEQyxLQUFvQixHQUFHVixhQUFhLENBQUNXLElBSHBDLEVBSWtCO0FBRW5CLFFBQUlVLE9BQW9CLEdBQUc7QUFDdkJELE1BQUFBLE1BQU0sRUFBRUEsTUFEZTtBQUV2QlgsTUFBQUEsTUFBTSxFQUFFQTtBQUZlLEtBQTNCO0FBS0EsV0FBT1YsY0FBYyxDQUFDTyxPQUFmLENBQ0hMLGFBQWEsQ0FBQ3FCLEtBRFgsRUFFSEQsT0FGRyxFQUdIWCxLQUhHLENBQVA7QUFLSDs7QUFFRGEsRUFBQUEsS0FBSyxDQUNEZCxNQURDLEVBRURDLEtBQW9CLEdBQUdWLGFBQWEsQ0FBQ1csSUFGcEMsRUFHa0I7QUFDbkIsV0FBT1osY0FBYyxDQUFDTyxPQUFmLENBQ0hMLGFBQWEsQ0FBQ3FCLEtBRFgsRUFFSGIsTUFGRyxFQUdIQyxLQUhHLENBQVA7QUFLSDs7QUFFRGMsRUFBQUEsT0FBTyxDQUNIZixNQURHLEVBRUhDLEtBQW9CLEdBQUdWLGFBQWEsQ0FBQ1csSUFGbEMsRUFHZ0I7QUFDbkIsV0FBT1osY0FBYyxDQUFDTyxPQUFmLENBQ0hMLGFBQWEsQ0FBQ3dCLE9BRFgsRUFFSGhCLE1BRkcsRUFHSEMsS0FIRyxDQUFQO0FBS0g7O0FBR0RnQixFQUFBQSxTQUFTLENBQ0xDLFNBREssRUFFTEMsUUFGSyxFQUdQO0FBQ0V6QixJQUFBQSxJQUFJLENBQUMwQixhQUFMLENBQW1CRixTQUFuQixJQUFnQ0MsUUFBaEM7QUFDSDs7QUF2RjhDOztnQkFBdEN6QixJLG1CQUV5QyxFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJVGFza30gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuXHJcbmltcG9ydCB7TWVzc2FnZUJ1aWxkZXJ9IGZyb20gJy4uL21lc3NhZ2luZy9idWlsZGVyJzsgXHJcblxyXG5pbXBvcnQge0FsZ29kUmVxdWVzdCxUcmFuc2FjdGlvbixSZXF1ZXN0RXJyb3JzfSBmcm9tICdAYWxnb3NpZ25lci9jb21tb24vdHlwZXMnO1xyXG5pbXBvcnQge0pzb25ScGNNZXRob2QsSnNvblBheWxvYWQsU3VwcG9ydGVkQWxnb2R9IGZyb20gJ0BhbGdvc2lnbmVyL2NvbW1vbi9tZXNzYWdpbmcvdHlwZXMnO1xyXG5pbXBvcnQge1J1bnRpbWV9IGZyb20gJ0BhbGdvc2lnbmVyL2NvbW1vbi9ydW50aW1lL3J1bnRpbWUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhc2sgZXh0ZW5kcyBSdW50aW1lIGltcGxlbWVudHMgSVRhc2sge1xyXG5cclxuICAgIHN0YXRpYyBzdWJzY3JpcHRpb25zOiB7W2tleTogc3RyaW5nXTogRnVuY3Rpb259ID0ge307XHJcblxyXG4gICAgc3RhdGljIGdldCBpblBheWxvYWRTaWduKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiBbJ2Ftb3VudCcsJ3RvJ11cclxuICAgIH1cclxuXHJcbiAgICBjb25uZWN0KCk6IFByb21pc2U8SnNvblBheWxvYWQ+IHtcclxuICAgICAgICByZXR1cm4gTWVzc2FnZUJ1aWxkZXIucHJvbWlzZShcclxuICAgICAgICAgICAgSnNvblJwY01ldGhvZC5BdXRob3JpemF0aW9uLCBcclxuICAgICAgICAgICAge31cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGFjY291bnRzKFxyXG4gICAgICAgIHBhcmFtczogSnNvblBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IFJlcXVlc3RFcnJvcnMgPSBSZXF1ZXN0RXJyb3JzLk5vbmVcclxuICAgICk6IFByb21pc2U8SnNvblBheWxvYWQ+e1xyXG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVpbGRlci5wcm9taXNlKFxyXG4gICAgICAgICAgICBKc29uUnBjTWV0aG9kLkFjY291bnRzLCBcclxuICAgICAgICAgICAgcGFyYW1zIGFzIEpzb25QYXlsb2FkLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVE9ETyBuZWVkcyBqc29uIGFuZCByYXcgcGF5bG9hZCBzdXBwb3J0IGFuZCBjb21wbGV0ZSBhcmd1bWVudCBzdXBwb3J0XHJcbiAgICBzaWduKFxyXG4gICAgICAgIHBhcmFtczogVHJhbnNhY3Rpb24sIFxyXG4gICAgICAgIGVycm9yOiBSZXF1ZXN0RXJyb3JzID0gUmVxdWVzdEVycm9ycy5Ob25lXHJcbiAgICApOiBQcm9taXNlPEpzb25QYXlsb2FkPiB7XHJcbiAgICAgICAgaWYoIXN1cGVyLnJlcXVpcmVkQXJncyhUYXNrLmluUGF5bG9hZFNpZ24sT2JqZWN0LmtleXMocGFyYW1zKSkpe1xyXG4gICAgICAgICAgICBlcnJvciA9IFJlcXVlc3RFcnJvcnMuSW52YWxpZFRyYW5zYWN0aW9uUGFyYW1zO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTWVzc2FnZUJ1aWxkZXIucHJvbWlzZShcclxuICAgICAgICAgICAgSnNvblJwY01ldGhvZC5TaWduVHJhbnNhY3Rpb24sIFxyXG4gICAgICAgICAgICBwYXJhbXMsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeShcclxuICAgICAgICBtZXRob2Q6IFN1cHBvcnRlZEFsZ29kLFxyXG4gICAgICAgIHBhcmFtczogSnNvblBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IFJlcXVlc3RFcnJvcnMgPSBSZXF1ZXN0RXJyb3JzLk5vbmVcclxuICAgICk6IFByb21pc2U8SnNvblBheWxvYWQ+e1xyXG5cclxuICAgICAgICBsZXQgcmVxdWVzdDogSnNvblBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVpbGRlci5wcm9taXNlKFxyXG4gICAgICAgICAgICBKc29uUnBjTWV0aG9kLkFsZ29kLCBcclxuICAgICAgICAgICAgcmVxdWVzdCBhcyBKc29uUGF5bG9hZCxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGFsZ29kKFxyXG4gICAgICAgIHBhcmFtczogSnNvblBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IFJlcXVlc3RFcnJvcnMgPSBSZXF1ZXN0RXJyb3JzLk5vbmVcclxuICAgICk6IFByb21pc2U8SnNvblBheWxvYWQ+e1xyXG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVpbGRlci5wcm9taXNlKFxyXG4gICAgICAgICAgICBKc29uUnBjTWV0aG9kLkFsZ29kLCBcclxuICAgICAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5kZXhlcihcclxuICAgICAgICBwYXJhbXM6IEpzb25QYXlsb2FkLFxyXG4gICAgICAgIGVycm9yOiBSZXF1ZXN0RXJyb3JzID0gUmVxdWVzdEVycm9ycy5Ob25lXHJcbiAgICApOiBQcm9taXNlPEpzb25QYXlsb2FkPntcclxuICAgICAgICByZXR1cm4gTWVzc2FnZUJ1aWxkZXIucHJvbWlzZShcclxuICAgICAgICAgICAgSnNvblJwY01ldGhvZC5JbmRleGVyLCBcclxuICAgICAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN1YnNjcmliZShcclxuICAgICAgICBldmVudE5hbWU6IHN0cmluZyxcclxuICAgICAgICBjYWxsYmFjazogRnVuY3Rpb25cclxuICAgICkge1xyXG4gICAgICAgIFRhc2suc3Vic2NyaXB0aW9uc1tldmVudE5hbWVdID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcbn0iXX0=